<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="init__cond_8H" kind="file" language="C++">
    <compoundname>init_cond.H</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">cmath</includes>
    <includedby refid="unit__test_8cpp" local="yes">/home/zhi/Github/Mini_Projects/one_d_advection/unit_test.cpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="1">
        <label>/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H</label>
        <link refid="init__cond_8H"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="init__cond_8H_1a666e4a916c5bebed3a7663c1b1be98de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; tophat</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;domain)</argsstring>
        <name>tophat</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tophat initial condition Takes the physical domain as parameter and returns the state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H" line="13" column="13" bodyfile="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H" bodystart="13" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="init__cond_8H_1a7b692d288718574e403dae96607afe85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; sine</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;domain)</argsstring>
        <name>sine</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sine initial condition Takes the physical domain as parameter and returns the state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H" line="28" column="13" bodyfile="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H" bodystart="28" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="init__cond_8H_1abeb5a484d9ba079677e8919464c0b826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; gaussian</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;domain)</argsstring>
        <name>gaussian</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gaussian initial condition Takes the physical domain as parameter and returns the state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H" line="43" column="13" bodyfile="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H" bodystart="43" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>INIT_COND_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INIT_COND_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>stores<sp/>some<sp/>simple<sp/>initial<sp/>conditions<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">std::vector&lt;double&gt;<sp/>tophat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>domain){</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>state(domain.size(),<sp/>0.0);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(domain.size());<sp/>++i){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(domain[i]<sp/>&gt;<sp/>1.0/3.0<sp/>&amp;&amp;<sp/>domain[i]<sp/>&lt;<sp/>2.0/3.0){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">std::vector&lt;double&gt;<sp/>sine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>domain){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>state(domain.size(),<sp/>1.0);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>3.141592654;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(domain.size());<sp/>++i){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>+=<sp/>0.5<sp/>*<sp/>std::sin(2.0*pi*domain[i]);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">std::vector&lt;double&gt;<sp/>gaussian(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;domain){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>state(domain.size(),<sp/>0.0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma<sp/>=<sp/>0.15;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(domain.size());<sp/>++i){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>state[i]<sp/>=<sp/>std::exp(-0.5*std::pow(domain[i]-0.5,2)/std::pow(sigma,2));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/zhi/Github/Mini_Projects/one_d_advection/init_cond.H"/>
  </compounddef>
</doxygen>
